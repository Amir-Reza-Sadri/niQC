{"version":3,"sources":["webpack:///./src/pages/index.jsx"],"names":["FragmentWrapper","Object","_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__","target","name","styles","PostWrapper","Index","_ref","data","_ref2$edges","fragments","edges","news","site","siteMetadata","_emotion_core__WEBPACK_IMPORTED_MODULE_1__","layouts__WEBPACK_IMPORTED_MODULE_6__","react_helmet__WEBPACK_IMPORTED_MODULE_4___default","a","title","titleAlt","components__WEBPACK_IMPORTED_MODULE_5__","shortName","description","map","_ref4","node","key","id","input","html","_ref5","cover","frontmatter","childImageSharp","fluid","path","date","excerpt","propTypes","PropTypes","shape","arrayOf","string","object","isRequired","tags","array","query"],"mappings":"oNAQMA,EAAkBC,OAAAC,EAAA,EAAAD,CAAA,OAAHE,OAAA,aAAGF,CAAH,CAAAG,KAAA,UAAAC,OAAA,wNAcfC,EAAcL,OAAAC,EAAA,EAAAD,CAAA,OAAHE,OAAA,aAAGF,CAAH,CAAAG,KAAA,UAAAC,OAAA,wNAcXE,EAAQ,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KAAWC,GACQD,EAAKE,WAAa,IAA5CC,MAAOD,OADW,IAAAD,EACC,GADDA,EAEXG,GAASJ,EAAKI,MAAQ,IAA7BD,MACcE,EAASL,EAAKK,KAA5BC,aACR,OACEd,OAAAe,EAAA,EAAAf,CAACgB,EAAA,EAAD,KACEhB,OAAAe,EAAA,EAAAf,CAACiB,EAAAC,EAAD,CAAQC,MAAON,EAAKO,WACpBpB,OAAAe,EAAA,EAAAf,CAACqB,EAAA,EAAD,CAAQF,MAAON,EAAKS,WAAYT,EAAKU,aACrCvB,OAAAe,EAAA,EAAAf,CAACD,EAAD,KACGW,EAAUc,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OACb1B,OAAAe,EAAA,EAAAf,CAACgB,EAAA,EAAD,CAASW,IAAKD,EAAKE,GAAIC,MAAOH,EAAKI,UAGvC9B,OAAAe,EAAA,EAAAf,CAACK,EAAD,KACGO,EAAKY,IAAI,SAAAO,GAAA,IAAGL,EAAHK,EAAGL,KAAH,OACR1B,OAAAe,EAAA,EAAAf,CAACqB,EAAA,EAAD,CACEM,IAAKD,EAAKE,GACVI,MAAON,EAAKO,YAAYD,MAAME,gBAAgBC,MAC9CC,KAAMV,EAAKO,YAAYG,KACvBjB,MAAOO,EAAKO,YAAYd,MACxBkB,KAAMX,EAAKO,YAAYI,KACvBC,QAASZ,EAAKY,eAQXhC,YAEfA,EAAMiC,UAAY,CAChB/B,KAAMgC,IAAUC,MAAM,CACpB7B,KAAM4B,IAAUC,MAAM,CACpB9B,MAAO6B,IAAUE,QACfF,IAAUC,MAAM,CACdf,KAAMc,IAAUC,MAAM,CACpBH,QAASE,IAAUG,OACnBV,YAAaO,IAAUC,MAAM,CAC3BT,MAAOQ,IAAUI,OAAOC,WACxBT,KAAMI,IAAUG,OAAOE,WACvB1B,MAAOqB,IAAUG,OAAOE,WACxBR,KAAMG,IAAUG,OAAOE,WACvBC,KAAMN,IAAUO,YAGnBF,iBAMJ,IAAMG,EAAK","file":"component---src-pages-index-jsx-0b490954af4f5ff89423.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport styled from '@emotion/styled';\nimport { Header, PostList } from 'components';\nimport { Layout, Content } from 'layouts';\n\nconst FragmentWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  margin: 4rem 4rem 1rem 4rem;\n  @media (max-width: 1000px) {\n    margin: 4rem 2rem 1rem 2rem;\n  }\n  @media (max-width: 700px) {\n    margin: 4rem 1rem 1rem 1rem;\n  }\n`;\n\nconst PostWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  margin: 4rem 4rem 1rem 4rem;\n  @media (max-width: 1000px) {\n    margin: 4rem 2rem 1rem 2rem;\n  }\n  @media (max-width: 700px) {\n    margin: 4rem 1rem 1rem 1rem;\n  }\n`;\n\nconst Index = ({ data }) => {\n  const { edges: fragments = [] } = data.fragments || {};\n  const { edges: news } = data.news || {};\n  const { siteMetadata: site } = data.site;\n  return (\n    <Layout>\n      <Helmet title={site.titleAlt} />\n      <Header title={site.shortName}>{site.description}</Header>\n      <FragmentWrapper>\n        {fragments.map(({ node }) => (\n          <Content key={node.id} input={node.html} />\n        ))}\n      </FragmentWrapper>\n      <PostWrapper>\n        {news.map(({ node }) => (\n          <PostList\n            key={node.id}\n            cover={node.frontmatter.cover.childImageSharp.fluid}\n            path={node.frontmatter.path}\n            title={node.frontmatter.title}\n            date={node.frontmatter.date}\n            excerpt={node.excerpt}\n          />\n        ))}\n      </PostWrapper>\n    </Layout>\n  );\n};\n\nexport default Index;\n\nIndex.propTypes = {\n  data: PropTypes.shape({\n    news: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            excerpt: PropTypes.string,\n            frontmatter: PropTypes.shape({\n              cover: PropTypes.object.isRequired,\n              path: PropTypes.string.isRequired,\n              title: PropTypes.string.isRequired,\n              date: PropTypes.string.isRequired,\n              tags: PropTypes.array,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n};\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        defaultTitle: title\n        titleAlt\n        shortName\n        description\n      }\n    }\n    fragments: allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/content/fragments/index/\" } }\n    ) {\n      edges {\n        node {\n          id\n          html\n        }\n      }\n    }\n    news: allMarkdownRemark(\n      limit: 6\n      filter: { fileAbsolutePath: { regex: \"/content/news/\" } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 75)\n          frontmatter {\n            title\n            path\n            tags\n            date(formatString: \"MM.DD.YYYY\")\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 1000) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}