{"version":3,"sources":["webpack:///./src/pages/news.jsx"],"names":["News","_ref","data","pathPrefix","site","siteMetadata","realPrefix","edges","allMarkdownRemark","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","layouts__WEBPACK_IMPORTED_MODULE_5__","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","a","title","components__WEBPACK_IMPORTED_MODULE_4__","href","map","_ref2","node","key","id","cover","frontmatter","childImageSharp","fluid","path","date","tags","excerpt","propTypes","PropTypes","shape","arrayOf","string","object","isRequired","array","query"],"mappings":"2MAOMA,EAAO,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACUC,EAAiBD,EAAKE,KAAtCC,aAAgBF,WAClBG,EAA4B,MAAfH,EAAqB,GAAKA,EACrCI,EAAUL,EAAKM,kBAAfD,MACR,OACEE,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,KACEF,OAAAC,EAAA,EAAAD,CAACG,EAAAC,EAAD,CAAQC,MAAO,SACfL,OAAAC,EAAA,EAAAD,CAACM,EAAA,EAAD,CAAQD,MAAM,QAAOL,OAAAC,EAAA,EAAAD,CAAA,KAAGO,KAASV,EAAL,YAAP,yBACpBC,EAAMU,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OACTV,OAAAC,EAAA,EAAAD,CAACM,EAAA,EAAD,CACEK,IAAKD,EAAKE,GACVC,MAAOH,EAAKI,YAAYD,MAAQH,EAAKI,YAAYD,MAAME,gBAAgBC,MAAQ,KAC/EC,KAAMP,EAAKI,YAAYG,KACvBZ,MAAOK,EAAKI,YAAYT,MACxBa,KAAMR,EAAKI,YAAYI,KACvBC,KAAMT,EAAKI,YAAYK,KACvBC,QAASV,EAAKU,cAOT7B,YAEfA,EAAK8B,UAAY,CACf5B,KAAM6B,IAAUC,MAAM,CACpBxB,kBAAmBuB,IAAUC,MAAM,CACjCzB,MAAOwB,IAAUE,QACfF,IAAUC,MAAM,CACdb,KAAMY,IAAUC,MAAM,CACpBH,QAASE,IAAUG,OACnBX,YAAaQ,IAAUC,MAAM,CAC3BV,MAAOS,IAAUI,OACjBT,KAAMK,IAAUG,OAAOE,WACvBtB,MAAOiB,IAAUG,OAAOE,WACxBT,KAAMI,IAAUG,OAAOE,WACvBR,KAAMG,IAAUM,YAGnBD,iBAMJ,IAAME,EAAK","file":"component---src-pages-news-jsx-8dc69f226e27c2988386.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport { Header, NewsList } from 'components';\nimport { Layout } from 'layouts';\n\nconst News = ({ data }) => {\n  const { siteMetadata: { pathPrefix } } = data.site;\n  const realPrefix = pathPrefix === '/' ? '' : pathPrefix;\n  const { edges } = data.allMarkdownRemark;\n  return (\n    <Layout>\n      <Helmet title={'News'} />\n      <Header title=\"News\"><a href={`${realPrefix}/rss.xml`}>Follow our RSS feed!</a></Header>\n      {edges.map(({ node }) => (\n        <NewsList\n          key={node.id}\n          cover={node.frontmatter.cover ? node.frontmatter.cover.childImageSharp.fluid : null}\n          path={node.frontmatter.path}\n          title={node.frontmatter.title}\n          date={node.frontmatter.date}\n          tags={node.frontmatter.tags}\n          excerpt={node.excerpt}\n        />\n      ))}\n    </Layout>\n  );\n};\n\nexport default News;\n\nNews.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            excerpt: PropTypes.string,\n            frontmatter: PropTypes.shape({\n              cover: PropTypes.object,\n              path: PropTypes.string.isRequired,\n              title: PropTypes.string.isRequired,\n              date: PropTypes.string.isRequired,\n              tags: PropTypes.array,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n};\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/content/news/\" } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 200)\n          frontmatter {\n            title\n            path\n            tags\n            date(formatString: \"MM.DD.YYYY\")\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 1000) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        pathPrefix\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}