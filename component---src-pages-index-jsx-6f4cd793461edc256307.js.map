{"version":3,"sources":["webpack:///./src/pages/index.jsx"],"names":["PostWrapper","Object","_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__","target","name","styles","Index","_ref","data","edges","allMarkdownRemark","site","siteMetadata","console","log","_emotion_core__WEBPACK_IMPORTED_MODULE_1__","layouts__WEBPACK_IMPORTED_MODULE_6__","react_helmet__WEBPACK_IMPORTED_MODULE_4___default","a","title","titleAlt","components__WEBPACK_IMPORTED_MODULE_5__","shortName","description","map","_ref2","node","key","id","cover","frontmatter","childImageSharp","fluid","path","date","excerpt","propTypes","PropTypes","shape","arrayOf","string","object","isRequired","tags","array","query"],"mappings":"oNAQMA,EAAcC,OAAAC,EAAA,EAAAD,CAAA,OAAHE,OAAA,aAAGF,CAAH,CAAAG,KAAA,UAAAC,OAAA,wNAcXC,EAAQ,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACPC,EAAUD,EAAKE,kBAAfD,MACcE,EAASH,EAAKG,KAA5BC,aAER,OADAC,QAAQC,IAAIH,GAEVV,OAAAc,EAAA,EAAAd,CAACe,EAAA,EAAD,KACEf,OAAAc,EAAA,EAAAd,CAACgB,EAAAC,EAAD,CAAQC,MAAOR,EAAKS,WACpBnB,OAAAc,EAAA,EAAAd,CAACoB,EAAA,EAAD,CAAQF,MAAOR,EAAKW,WAAYX,EAAKY,aACrCtB,OAAAc,EAAA,EAAAd,CAACD,EAAD,KACGS,EAAMe,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OACTzB,OAAAc,EAAA,EAAAd,CAACoB,EAAA,EAAD,CACEM,IAAKD,EAAKE,GACVC,MAAOH,EAAKI,YAAYD,MAAME,gBAAgBC,MAC9CC,KAAMP,EAAKI,YAAYG,KACvBd,MAAOO,EAAKI,YAAYX,MACxBe,KAAMR,EAAKI,YAAYI,KACvBC,QAAST,EAAKS,eAQX7B,YAEfA,EAAM8B,UAAY,CAChB5B,KAAM6B,IAAUC,MAAM,CACpB5B,kBAAmB2B,IAAUC,MAAM,CACjC7B,MAAO4B,IAAUE,QACfF,IAAUC,MAAM,CACdZ,KAAMW,IAAUC,MAAM,CACpBH,QAASE,IAAUG,OACnBV,YAAaO,IAAUC,MAAM,CAC3BT,MAAOQ,IAAUI,OAAOC,WACxBT,KAAMI,IAAUG,OAAOE,WACvBvB,MAAOkB,IAAUG,OAAOE,WACxBR,KAAMG,IAAUG,OAAOE,WACvBC,KAAMN,IAAUO,YAGnBF,iBAMJ,IAAMG,EAAK","file":"component---src-pages-index-jsx-6f4cd793461edc256307.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport styled from '@emotion/styled';\nimport { Header, PostList } from 'components';\nimport { Layout } from 'layouts';\n\nconst PostWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  margin: 4rem 4rem 1rem 4rem;\n  @media (max-width: 1000px) {\n    margin: 4rem 2rem 1rem 2rem;\n  }\n  @media (max-width: 700px) {\n    margin: 4rem 1rem 1rem 1rem;\n  }\n`;\n\nconst Index = ({ data }) => {\n  const { edges } = data.allMarkdownRemark;\n  const { siteMetadata: site } = data.site;\n  console.log(site)\n  return (\n    <Layout>\n      <Helmet title={site.titleAlt} />\n      <Header title={site.shortName}>{site.description}</Header>\n      <PostWrapper>\n        {edges.map(({ node }) => (\n          <PostList\n            key={node.id}\n            cover={node.frontmatter.cover.childImageSharp.fluid}\n            path={node.frontmatter.path}\n            title={node.frontmatter.title}\n            date={node.frontmatter.date}\n            excerpt={node.excerpt}\n          />\n        ))}\n      </PostWrapper>\n    </Layout>\n  );\n};\n\nexport default Index;\n\nIndex.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            excerpt: PropTypes.string,\n            frontmatter: PropTypes.shape({\n              cover: PropTypes.object.isRequired,\n              path: PropTypes.string.isRequired,\n              title: PropTypes.string.isRequired,\n              date: PropTypes.string.isRequired,\n              tags: PropTypes.array,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n};\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        defaultTitle: title\n        titleAlt\n        shortName\n        description\n      }\n    }\n    allMarkdownRemark(\n      limit: 6\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 75)\n          frontmatter {\n            title\n            path\n            tags\n            date(formatString: \"MM.DD.YYYY\")\n            cover {\n              childImageSharp {\n                fluid(\n                  maxWidth: 1000\n                ) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}